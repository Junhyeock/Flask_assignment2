1. orjson
  a. dev group 이 아닌 main에 설치 
  b. 벤치마킹 속도가 다른 json 보다 빠름

2. DTO ( Data Transfer Object )
  a. DTO란? data 를 "전달"하기 위한 목적으로 생성한 객체를 의미
    -> data를 수정, 추가, 삭제하는 순간 DTO가 아니게 됨
  b. DTO를 사용하지 않고 Dict를 쓸 경우 발생하는 문제
    • 직접 호출하지 않고는 그 안에 어떤 key와 value가 들어가는지 알 수 없게됨
      -> 코드를 읽는 것으로는 동작을 이해할 수 없게 됨
    • 개발 도중에 실수로 key를 누락 하거나, 없는 key를 추가해도 오류를 잡기 쉽지 않음
    • Dict는 기본적으로 Frozen 되어있지 않기 때문에 생성 이후 중간에 값이 바뀌어도 이를 알 수가 없음

3. uuid
  1. uuid4 가 겹칠수 있는 확률은 매우 낮기 때문에 무시가능
  2. 영어소문자, 영어대문자, 숫자만을 이용한 ID ( 특수문자 제외 )

4. Base62, Base64
    1. 결과 값에 들어갈 수 있는 문자, 숫자를 미리 지정합니다. 이 값들의 개수가 64개면 base64 가 되고, 62개면 base62 가 됩니다.
    2. 앞으로 “결과 값에 들어갈 수 있는 문자, 숫자” 가 모두 들어있는 문자열을 `base` 라고 부르겠습니다.
    3. 정수를 base_len 으로 1번 나눈 후 몫과 나머지를 구합니다.
    4. base 의 “나머지” 번째 값을 결과에 추가합니다.
    5. 몫이 0이 될 때 까지 반복합니다.
    6. 결과를 문자열로 변환해 리턴합니다.

5. Debuging
    - Resume Program: 다음 중단점을 만날때 까지 계속 실행합니다.
    - Step Over: 한 줄 실행합니다.
    - Step Into: 함수 내부로 들어갑니다.
    - Step Into My Code: 함수 내부로 들어가되, 라이브러리 코드등은 무시하고 내 함수 안으로만 들어갑니다.
    - Step Out: 함수 밖으로 빠져나갑니다. 현재 함수를 호출한 쪽으로 이동합니다.

6. Sqids
  a. Sqids란? 숫자로부터 짧은 고유 식별자를 생성할 수 있는 오픈 소스 라이브러리
Sqids vs Base62
  Sqids : 12.505
  Base62 : 0.47048
